#1
import pandas
import numpy
import scipy
from scipy import stats
from scipy.optimize import minimize
from scipy.stats import norm
from plotnine import *
df=pandas.read_csv('data.txt')
def linearlike(p,obs):
     B0=p[0]
     B1=p[1]
     sigma=p[2]
     expected=B0+B1*obs.x
     nll=-1*norm(expected,sigma).logpdf(obs.y).sum()
     return nll
initialGuess=numpy.array([1,1,1])
fit=minimize(linearlike,initialGuess,method="Nelder-Mead",options={'disp':True},args=df)
def quadlike(p,obs):
     B0=p[0]
     B1=p[1]
     B2=p[2]
     sigma=p[3]
     expected=B0+B1*obs.x+B2*obs.x*obs.x
     nll=-1*norm(expected,sigma).logpdf(obs.y).sum()
     return nll
initialGuess=numpy.array([1,1,1,1])
fit2=minimize(quadlike,initialGuess,method="Nelder-Mead",options={'disp':True},args=df)
teststat=2*(fit.fun - fit2.fun)
df=len(fit2.x) - len(fit.x)
1 - stats.chi2.cdf(teststat,df)

#2
# Setting up the function
def dataSim(y,t0,R1,A11,A12,R2,A22,A21):
	N1=y[0]
	N2=y[1]
	dN1dt=R1*(1-(N1*A11)-(N2*A12))*N1
	dN2dt=R2*(1-(N2*A22)-(N1*A21))*N2
	return[dN1dt,dN2dt]
times=range(0,500)	
y0=[0.1,0.1]

# Simulation 1
params=(0.2,0.05,0.02,0.2,0.05,0.01)
sim=spint.odeint(func=dataSim,y0=y0,t=times,args=params)
simDF=pandas.DataFrame({"t":times,"1":sim[:,0],"2":sim[:,1]})
ggplot(simDF,aes(x="t",y="1"))+geom_line()+geom_line(simDF,aes(x="t",y="2"),color='red')+theme_classic()

#Simulation 2
params=(0.2,0.08,0.01,0.1,0.08,0.01)
sim=spint.odeint(func=dataSim,y0=y0,t=times,args=params)
simDF=pandas.DataFrame({"t":times,"1":sim[:,0],"2":sim[:,1]})
ggplot(simDF,aes(x="t",y="1"))+geom_line()+geom_line(simDF,aes(x="t",y="2"),col$

#Simulation 3
params=(0.2,0.05,0.001,0.15,0.08,0.07)
sim=spint.odeint(func=dataSim,y0=y0,t=times,args=params)
simDF=pandas.DataFrame({"t":times,"1":sim[:,0],"2":sim[:,1]})
ggplot(simDF,aes(x="t",y="1"))+geom_line()+geom_line(simDF,aes(x="t",y="2"),col$

